<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.dao.third.DataSourceMapper" >
  <resultMap id="BaseResultMap" type="com.example.model.DataSource" >
    <constructor >
      <idArg column="id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="en_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="description" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="is_public" jdbcType="BIT" javaType="java.lang.Boolean" />
      <arg column="call_type" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="url_pattern" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_by" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="update_by" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_at" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="update_at" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="timeout" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="data_source_auth_id" jdbcType="BIGINT" javaType="java.lang.Long" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.example.model.DataSourceWithBLOBs" >
    <constructor >
      <idArg column="id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="en_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="description" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="is_public" jdbcType="BIT" javaType="java.lang.Boolean" />
      <arg column="call_type" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="url_pattern" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_by" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="update_by" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_at" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="update_at" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="timeout" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="data_source_auth_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="body_pattern" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
      <arg column="sample_output" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, en_name, description, is_public, call_type, url_pattern, create_by, update_by, 
    create_at, update_at, timeout, data_source_auth_id
  </sql>
  <sql id="Blob_Column_List" >
    body_pattern, sample_output
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_source
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from data_source
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.example.model.DataSourceWithBLOBs" >
    insert into data_source (id, name, en_name, 
      description, is_public, call_type, 
      url_pattern, create_by, update_by, 
      create_at, update_at, timeout, 
      data_source_auth_id, body_pattern, sample_output
      )
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{enName,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR}, #{isPublic,jdbcType=BIT}, #{callType,jdbcType=VARCHAR}, 
      #{urlPattern,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, #{updateBy,jdbcType=VARCHAR}, 
      #{createAt,jdbcType=BIGINT}, #{updateAt,jdbcType=BIGINT}, #{timeout,jdbcType=INTEGER}, 
      #{dataSourceAuthId,jdbcType=BIGINT}, #{bodyPattern,jdbcType=LONGVARCHAR}, #{sampleOutput,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.model.DataSourceWithBLOBs" >
    insert into data_source
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="enName != null" >
        en_name,
      </if>
      <if test="description != null" >
        description,
      </if>
      <if test="isPublic != null" >
        is_public,
      </if>
      <if test="callType != null" >
        call_type,
      </if>
      <if test="urlPattern != null" >
        url_pattern,
      </if>
      <if test="createBy != null" >
        create_by,
      </if>
      <if test="updateBy != null" >
        update_by,
      </if>
      <if test="createAt != null" >
        create_at,
      </if>
      <if test="updateAt != null" >
        update_at,
      </if>
      <if test="timeout != null" >
        timeout,
      </if>
      <if test="dataSourceAuthId != null" >
        data_source_auth_id,
      </if>
      <if test="bodyPattern != null" >
        body_pattern,
      </if>
      <if test="sampleOutput != null" >
        sample_output,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="enName != null" >
        #{enName,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="isPublic != null" >
        #{isPublic,jdbcType=BIT},
      </if>
      <if test="callType != null" >
        #{callType,jdbcType=VARCHAR},
      </if>
      <if test="urlPattern != null" >
        #{urlPattern,jdbcType=VARCHAR},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="createAt != null" >
        #{createAt,jdbcType=BIGINT},
      </if>
      <if test="updateAt != null" >
        #{updateAt,jdbcType=BIGINT},
      </if>
      <if test="timeout != null" >
        #{timeout,jdbcType=INTEGER},
      </if>
      <if test="dataSourceAuthId != null" >
        #{dataSourceAuthId,jdbcType=BIGINT},
      </if>
      <if test="bodyPattern != null" >
        #{bodyPattern,jdbcType=LONGVARCHAR},
      </if>
      <if test="sampleOutput != null" >
        #{sampleOutput,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.model.DataSourceWithBLOBs" >
    update data_source
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="enName != null" >
        en_name = #{enName,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="isPublic != null" >
        is_public = #{isPublic,jdbcType=BIT},
      </if>
      <if test="callType != null" >
        call_type = #{callType,jdbcType=VARCHAR},
      </if>
      <if test="urlPattern != null" >
        url_pattern = #{urlPattern,jdbcType=VARCHAR},
      </if>
      <if test="createBy != null" >
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateBy != null" >
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="createAt != null" >
        create_at = #{createAt,jdbcType=BIGINT},
      </if>
      <if test="updateAt != null" >
        update_at = #{updateAt,jdbcType=BIGINT},
      </if>
      <if test="timeout != null" >
        timeout = #{timeout,jdbcType=INTEGER},
      </if>
      <if test="dataSourceAuthId != null" >
        data_source_auth_id = #{dataSourceAuthId,jdbcType=BIGINT},
      </if>
      <if test="bodyPattern != null" >
        body_pattern = #{bodyPattern,jdbcType=LONGVARCHAR},
      </if>
      <if test="sampleOutput != null" >
        sample_output = #{sampleOutput,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.model.DataSourceWithBLOBs" >
    update data_source
    set name = #{name,jdbcType=VARCHAR},
      en_name = #{enName,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      is_public = #{isPublic,jdbcType=BIT},
      call_type = #{callType,jdbcType=VARCHAR},
      url_pattern = #{urlPattern,jdbcType=VARCHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_by = #{updateBy,jdbcType=VARCHAR},
      create_at = #{createAt,jdbcType=BIGINT},
      update_at = #{updateAt,jdbcType=BIGINT},
      timeout = #{timeout,jdbcType=INTEGER},
      data_source_auth_id = #{dataSourceAuthId,jdbcType=BIGINT},
      body_pattern = #{bodyPattern,jdbcType=LONGVARCHAR},
      sample_output = #{sampleOutput,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.model.DataSource" >
    update data_source
    set name = #{name,jdbcType=VARCHAR},
      en_name = #{enName,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      is_public = #{isPublic,jdbcType=BIT},
      call_type = #{callType,jdbcType=VARCHAR},
      url_pattern = #{urlPattern,jdbcType=VARCHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_by = #{updateBy,jdbcType=VARCHAR},
      create_at = #{createAt,jdbcType=BIGINT},
      update_at = #{updateAt,jdbcType=BIGINT},
      timeout = #{timeout,jdbcType=INTEGER},
      data_source_auth_id = #{dataSourceAuthId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>


  <select id="selectByServiceCode" parameterType="string" resultType="com.example.model.DataSourceWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_source

    where en_name=#{serviceCode}
  </select>

  <select id="selectAllDataSource" resultType="com.example.model.DataSourceWithBLOBs">
    select
    <include refid="Blob_Column_List"/>,
    <include refid="Base_Column_List"/>
    from data_source
  </select>

</mapper>